diff --git a/include/systems/graphics.hpp b/include/systems/graphics.hpp
index 3b6a51d..9a2d129 100644
--- a/include/systems/graphics.hpp
+++ b/include/systems/graphics.hpp
@@ -14,6 +14,12 @@
 #include "System.h"
 
 namespace trillek {
+namespace transform {
+
+class Transform;
+
+} // End of transform.
+
 namespace graphics {
 
 class Material;
@@ -25,6 +31,7 @@ struct MaterialGroup {
         std::vector<size_t> texture_indexes;
         struct RenderableGroup {
             std::shared_ptr<Renderable> renderable;
+            std::list<std::shared_ptr<transform::Transform>> instances;
             size_t buffer_group_index;
         };
         std::list<RenderableGroup> renderable_groups;
diff --git a/src/main.cpp b/src/main.cpp
index 404ac1f..d48c9f6 100644
--- a/src/main.cpp
+++ b/src/main.cpp
@@ -6,10 +6,15 @@
 #include "systems/json-parser.hpp"
 #include "systems/transform-system.hpp"
 #include "systems/resource-system.hpp"
-#include "systems/graphics.hpp"
 #include <cstddef>
 
 size_t gAllocatedSize = 0;
+#include "systems/graphics.hpp"
+#include "components/renderable.hpp"
+#include "resources/shader.hpp"
+#include "resources/material.hpp"
+#include "resources/md5mesh.hpp"
+#include "resources/transform.hpp"
 
 int main(int argCount, char **argValues) {
     // create the window
@@ -27,8 +32,16 @@ int main(int argCount, char **argValues) {
     trillek::json::System jparser;
     jparser.Parse("assets/tests/sample.json");
 
+    std::shared_ptr<trillek::graphics::Renderable> ren1(new trillek::graphics::Renderable());
+    auto mesh = trillek::resource::System::GetInstance()->Get<trillek::resource::MD5Mesh>("bob");
+    ren1->SetMesh(mesh);
+    ren1->GetMaterial()->SetShader(trillek::resource::System::GetInstance()->Get<trillek::resource::Shader>("basic_shader"));
+    ren1->UpdateBufferGroups();
+
     // start the graphic system
     trillek::TrillekGame::GetGraphicSystem().Start(os.GetWindowWidth(), os.GetWindowHeight());
+    trillek::transform::System::AddTransform(0);
+    trillek::TrillekGame::GetGraphicSystem().AddRenderable(0, ren1);
 
     // we register the systems in this queue
     std::queue<trillek::SystemBase*> systems;
diff --git a/src/systems/graphics.cpp b/src/systems/graphics.cpp
index 9602de2..5fc7737 100644
--- a/src/systems/graphics.cpp
+++ b/src/systems/graphics.cpp
@@ -1,6 +1,7 @@
 #include "TrillekGame.h"
 #include "systems/graphics.hpp"
 #include "systems/resource-system.hpp"
+#include "systems/transform-system.hpp"
 
 #include "resources/md5mesh.hpp"
 #include "resources/shader.hpp"
@@ -56,6 +57,7 @@ void System::RunBatch() const {
                 glBindVertexArray(bufgrp->vao);
                 glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, bufgrp->ibo);
 
+                // TODO: Loop through each transform instance and set the shader value.
                 glDrawElements(GL_TRIANGLES, bufgrp->ibo_count, GL_UNSIGNED_INT, 0);
             }
         }
@@ -130,6 +132,7 @@ void System::AddRenderable(const unsigned int entity_id, std::shared_ptr<Rendera
         MaterialGroup::TextureGroup::RenderableGroup rengrp;
         rengrp.renderable = ren;
         rengrp.buffer_group_index = i;
+        rengrp.instances.push_back(transform::System::GetTransform(entity_id));
 
         texgrp.renderable_groups.push_back(std::move(rengrp));
         matgrp->texture_groups.push_back(std::move(texgrp));
